// <auto-generated />
using System;
using ControlePlantas.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ControlePlantas.Data.Migrations
{
    [DbContext(typeof(ControlePlantasContext))]
    [Migration("20200714003716_inicial")]
    partial class inicial
    {
        protected void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ControlePlantas.Domain.AreaPlantio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdAreaPlan")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DatCada")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("DescAreaPlan")
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnName("IdEmpr")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TamanhoAlqueires")
                        .HasColumnName("ValTamaAlqu")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TamanhoHectares")
                        .HasColumnName("ValTamaHect")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("PLArePlan");
                });

            modelBuilder.Entity("ControlePlantas.Domain.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdEmpr")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DatCada")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnName("DocuEmpr")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("NomeEmpr")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnName("TeleEmpr")
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("PLEmpr");
                });

            modelBuilder.Entity("ControlePlantas.Domain.EntradaInsumo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdEntrInsu")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DatCada")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnName("DatEntr")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnName("DescDocu")
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnName("IdEmpr")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdFornecedor")
                        .HasColumnName("IdForn")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdInsumo")
                        .HasColumnName("IdInsu")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Quantidade")
                        .HasColumnName("QtdEntr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnName("ValEntr")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdFornecedor");

                    b.HasIndex("IdInsumo");

                    b.ToTable("PLEntrInsu");
                });

            modelBuilder.Entity("ControlePlantas.Domain.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdForn")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DatCada")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Documento")
                        .HasColumnName("DocuForn")
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnName("IdEmpr")
                        .HasColumnType("char(36)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("NomForn")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("PLForn");
                });

            modelBuilder.Entity("ControlePlantas.Domain.Insumo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdInsu")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DatCada")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnName("IdEmpr")
                        .HasColumnType("char(36)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("NomInsu")
                        .HasColumnType("varchar(150)");

                    b.Property<int>("TipoInsumo")
                        .HasColumnName("IdTipoInsu")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("PLInsu");
                });

            modelBuilder.Entity("ControlePlantas.Domain.Plantacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdPlan")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DatCada")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("DesPlan")
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("IdAreaPlantio")
                        .HasColumnName("IdAreaPlan")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnName("IdEmpr")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("IdAreaPlantio");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("PLPlan");
                });

            modelBuilder.Entity("ControlePlantas.Domain.SaidaInsumo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdSaidInsu")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DatCada")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataSaida")
                        .HasColumnName("DatSaid")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("DescSaid")
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnName("IdEmpr")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdEntradaInsumo")
                        .HasColumnName("IdEntrInsu")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Quantidade")
                        .HasColumnName("QtdSaid")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdEntradaInsumo");

                    b.ToTable("PLSaidInsu");
                });

            modelBuilder.Entity("ControlePlantas.Domain.ServicoRealizadoPlantacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DatCada")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataServico")
                        .HasColumnName("DatServ")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnName("IdEmpr")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdPlantacao")
                        .HasColumnType("char(36)");

                    b.Property<string>("Observacao")
                        .HasColumnName("DescObse")
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("TipoServicoRealizado")
                        .HasColumnName("IdTipoServReal")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorServico")
                        .HasColumnName("ValServ")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdPlantacao");

                    b.ToTable("PLServRealPlan");
                });

            modelBuilder.Entity("ControlePlantas.Domain.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdUsua")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DatCada")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnName("IdEmpr")
                        .HasColumnType("char(36)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnName("LogiUsua")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("NomUsua")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnName("SenhUsua")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TipoUsuario")
                        .HasColumnName("TipoUsua")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("PLUsua");
                });

            modelBuilder.Entity("ControlePlantas.Domain.UtilizacaoInsumo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdUtilInsu")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DatCada")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataUtilizacao")
                        .HasColumnName("DatUtil")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnName("IdEmpr")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdPlantacao")
                        .HasColumnName("IdPlan")
                        .HasColumnType("char(36)");

                    b.Property<string>("Observacao")
                        .HasColumnName("ObsUtilInsu")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdPlantacao");

                    b.ToTable("PLUtilInsu");
                });

            modelBuilder.Entity("ControlePlantas.Domain.UtilizacaoInsumoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdUtilInsuItem")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DatCada")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IdEntradaInsumo")
                        .HasColumnName("IdEntrInsu")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUtilizacaoInsumo")
                        .HasColumnName("IdUtilInsu")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdEntradaInsumo");

                    b.HasIndex("IdUtilizacaoInsumo");

                    b.ToTable("PLUtilInsuItem");
                });

            modelBuilder.Entity("ControlePlantas.Domain.AreaPlantio", b =>
                {
                    b.HasOne("ControlePlantas.Domain.Empresa", "Empresa")
                        .WithMany("AreasPlantio")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ControlePlantas.Domain.Empresa", b =>
                {
                    b.OwnsOne("ControlePlantas.Domain.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("EmpresaId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("CEP")
                                .HasColumnName("EndeCEP")
                                .HasColumnType("varchar(8)");

                            b1.Property<string>("Cidade")
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("Complemento")
                                .HasColumnName("EndeCompl")
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasColumnName("EndeLogr")
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("Numero")
                                .HasColumnName("EndeNum")
                                .HasColumnType("varchar(50)");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("PLEmpr");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });
                });

            modelBuilder.Entity("ControlePlantas.Domain.EntradaInsumo", b =>
                {
                    b.HasOne("ControlePlantas.Domain.Empresa", "Empresa")
                        .WithMany("EntradaInsumos")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ControlePlantas.Domain.Fornecedor", "Fornecedor")
                        .WithMany("EntradasInsumos")
                        .HasForeignKey("IdFornecedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlePlantas.Domain.Insumo", "Insumo")
                        .WithMany("EntradasInsumo")
                        .HasForeignKey("IdInsumo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControlePlantas.Domain.Fornecedor", b =>
                {
                    b.HasOne("ControlePlantas.Domain.Empresa", "Empresa")
                        .WithMany("Fornecedores")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("ControlePlantas.Domain.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("FornecedorId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("CEP")
                                .HasColumnName("EndeCEP")
                                .HasColumnType("varchar(8)");

                            b1.Property<string>("Cidade")
                                .HasColumnName("EndeCida")
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("Complemento")
                                .HasColumnName("EndeCompl")
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasColumnName("EndeLogr")
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("Numero")
                                .HasColumnName("EndeNum")
                                .HasColumnType("varchar(50)");

                            b1.HasKey("FornecedorId");

                            b1.ToTable("PLForn");

                            b1.WithOwner()
                                .HasForeignKey("FornecedorId");
                        });
                });

            modelBuilder.Entity("ControlePlantas.Domain.Insumo", b =>
                {
                    b.HasOne("ControlePlantas.Domain.Empresa", "Empresa")
                        .WithMany("Insumos")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ControlePlantas.Domain.Plantacao", b =>
                {
                    b.HasOne("ControlePlantas.Domain.AreaPlantio", "AreaPlantio")
                        .WithMany("Plantacoes")
                        .HasForeignKey("IdAreaPlantio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlePlantas.Domain.Empresa", "Empresa")
                        .WithMany("Plantacoes")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("ControlePlantas.Domain.Periodo", "Periodo", b1 =>
                        {
                            b1.Property<Guid>("PlantacaoId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime>("DataFinal")
                                .HasColumnName("DatFina")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("DataInicial")
                                .HasColumnName("DatInic")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("PlantacaoId");

                            b1.ToTable("PLPlan");

                            b1.WithOwner()
                                .HasForeignKey("PlantacaoId");
                        });
                });

            modelBuilder.Entity("ControlePlantas.Domain.SaidaInsumo", b =>
                {
                    b.HasOne("ControlePlantas.Domain.Empresa", "Empresa")
                        .WithMany("SaidaInsumos")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ControlePlantas.Domain.EntradaInsumo", "EntradaInsumo")
                        .WithMany("SaidasInsumo")
                        .HasForeignKey("IdEntradaInsumo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControlePlantas.Domain.ServicoRealizadoPlantacao", b =>
                {
                    b.HasOne("ControlePlantas.Domain.Empresa", "Empresa")
                        .WithMany("ServicoRealizadoPlantacoes")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ControlePlantas.Domain.Plantacao", "Plantacao")
                        .WithMany("ServicosRealizados")
                        .HasForeignKey("IdPlantacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControlePlantas.Domain.Usuario", b =>
                {
                    b.HasOne("ControlePlantas.Domain.Empresa", "Empresa")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ControlePlantas.Domain.UtilizacaoInsumo", b =>
                {
                    b.HasOne("ControlePlantas.Domain.Empresa", "Empresa")
                        .WithMany("UtilizacaoInsumos")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ControlePlantas.Domain.Plantacao", "Plantacao")
                        .WithMany("InsumosUtilizado")
                        .HasForeignKey("IdPlantacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControlePlantas.Domain.UtilizacaoInsumoItem", b =>
                {
                    b.HasOne("ControlePlantas.Domain.EntradaInsumo", "EntradaInsumo")
                        .WithMany("UtilizacaoInsumoItens")
                        .HasForeignKey("IdEntradaInsumo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ControlePlantas.Domain.UtilizacaoInsumo", "UtilizacaoInsumo")
                        .WithMany("ItensUtilizacao")
                        .HasForeignKey("IdUtilizacaoInsumo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
